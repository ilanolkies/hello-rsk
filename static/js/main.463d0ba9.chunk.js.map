{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","getting","greeting","value","setting","error","receipt","getGreeting","bind","handleChange","setGreeting","this","setState","Web3","eth","Contract","helloRSKAbi","methods","call","then","event","target","preventDefault","helloRSK","window","web3","currentProvider","enable","accounts","send","from","catch","console","log","className","src","logo","alt","onClick","onSubmit","type","onChange","disabled","href","rel","color","width","message","transactionHash","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,kWC0H5BC,G,mBA7Gb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACXC,SAAS,EACTC,SAAU,KACVC,MAAO,GACPC,SAAS,EACTC,MAAO,KACPC,QAAS,MAGX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAdD,E,iFAkBlBG,KAAKJ,gB,oCAGS,IAAD,OACbI,KAAKC,SAAS,CAAEX,SAAS,IAER,IADJ,IAAIY,IA7BR,sCA8BiBC,IAAIC,UAASC,EA3BnB,8CA6BXC,QAAQV,cAAcW,OAC9BC,MAAK,SAAAjB,GACJ,EAAKU,SAAS,CAAEV,WAAUD,SAAS,S,mCAIzBmB,GAAQ,IACZjB,EAAUiB,EAAMC,OAAhBlB,MACRQ,KAAKC,SAAS,CAAET,Y,kCAGLiB,GAAQ,IAAD,OAClBA,EAAME,iBACNX,KAAKC,SAAS,CAAER,SAAS,EAAME,QAAS,KAAMD,MAAO,OAFnC,IAIVF,EAAUQ,KAAKX,MAAfG,MAGFoB,EAAW,IADJ,IAAIV,IAAKW,OAAOC,MACHX,IAAIC,UAASC,EA/CnB,8CAiDpBQ,OAAOC,KAAKC,gBAAgBC,SAC3BR,MAAK,SAAAS,GAAQ,OAAIL,EAASN,QAAQP,YAAYP,GAAO0B,KAAK,CAAEC,KAAMF,EAAS,QAC3ET,MAAK,SAAAb,GAAO,OAAI,EAAKM,SAAS,CAAEN,eAChCyB,OAAM,SAAA1B,GAAK,OAAI,EAAKO,SAAS,CAAEP,aAC/Bc,MAAK,kBAAM,EAAKP,SAAS,CAAER,SAAS,OACpCe,KAAKR,KAAKJ,e,+BAGF,IAAD,EAQJI,KAAKX,MANPE,EAFM,EAENA,SACAD,EAHM,EAGNA,QACAE,EAJM,EAINA,MACAC,EALM,EAKNA,QACAC,EANM,EAMNA,MACAC,EAPM,EAONA,QAKF,OAFA0B,QAAQC,IAAI3B,GAGV,yBAAK4B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,iEAIF,6BACA,0BAAMH,UAAU,YACd,0CACA,sDACA,6BACE,wCAAa,2BAAIjC,EAAU,MAAQC,GAAnC,KAAkD,uBAAGoC,QAAS3B,KAAKJ,aAAjB,UAAlD,MAEF,0BAAMgC,SAAU5B,KAAKD,aACnB,2BACE8B,KAAK,OACLN,UAAU,iBACV/B,MAAOA,EACPsC,SAAU9B,KAAKF,aACfiC,SAAUtC,IAGToB,OAAOC,KAER,2BAAOe,KAAK,SAASrC,MAAM,gBAAgB+B,UAAU,kBAAkBQ,UAAWlB,OAAOC,MAAQrB,IADjG,uBAAGuC,KAAK,0FAA0FtB,OAAO,SAASuB,IAAI,uBAAtH,cAGDxC,GAAW,kBAAC,YAAD,CAAWyC,MAAM,UAAUC,MAAO,OAEhD,6BACGzC,GAAK,iBAAcA,EAAM0C,SACzBzC,GAAW,uBAAGqC,KAAI,6CAAwCrC,EAAQ0C,iBAAmB3B,OAAO,SAASuB,IAAI,uBAAuBtC,EAAQ0C,mBAG7I,4BAAQd,UAAU,cAAlB,2BAC0B,uBAAGS,KAAK,qFAAqFtB,OAAO,SAASuB,IAAI,uBAAjH,c,GAvGhBK,cCAEC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,iB","file":"static/js/main.463d0ba9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f0fe53bb.svg\";","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { BarLoader } from 'react-spinners';\nimport helloRSKAbi from './HelloRSKAbi';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst node = 'https://public-node.testnet.rsk.co';\n\n// https://explorer.testnet.rsk.co/address/0x0fb49bb37ba4b0186a87c866a2bbd29e1ef378da\nconst helloRSKAddress = '0x0fb49bb37ba4b0186a87c866a2bbd29e1ef378da';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      getting: false,\n      greeting: null,\n      value: '',\n      setting: false,\n      error: null,\n      receipt: null,\n    };\n\n    this.getGreeting = this.getGreeting.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.setGreeting = this.setGreeting.bind(this);\n  }\n\n  componentDidMount () {\n    this.getGreeting();\n  }\n\n  getGreeting () {\n    this.setState({ getting: true });\n    const web3 = new Web3(node);\n    const helloRSK = new web3.eth.Contract(helloRSKAbi, helloRSKAddress);\n\n    helloRSK.methods.getGreeting().call()\n    .then(greeting => {\n      this.setState({ greeting, getting: false })\n    });\n  }\n\n  handleChange (event) {\n    const { value } = event.target;\n    this.setState({ value });\n  }\n\n  setGreeting (event) {\n    event.preventDefault();\n    this.setState({ setting: true, receipt: null, error: null });\n\n    const { value } = this.state;\n\n    const web3 = new Web3(window.web3);\n    const helloRSK = new web3.eth.Contract(helloRSKAbi, helloRSKAddress);\n\n    window.web3.currentProvider.enable()\n    .then(accounts => helloRSK.methods.setGreeting(value).send({ from: accounts[0] }))\n    .then(receipt => this.setState({ receipt }))\n    .catch(error => this.setState({ error }))\n    .then(() => this.setState({ setting: false }))\n    .then(this.getGreeting);\n  }\n\n  render () {\n    const {\n      greeting,\n      getting,\n      value,\n      setting,\n      error,\n      receipt,\n    } = this.state;\n\n    console.log(receipt)\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Welcome to the Internet of Value!\n          </p>\n        </header>\n        <hr />\n        <main className=\"App-body\">\n          <h1>Hello RSK!</h1>\n          <p>Using a smart contract.</p>\n          <div>\n            <p>Greeting: <b>{getting ? '...' : greeting}</b> (<a onClick={this.getGreeting}>reload</a>)</p>\n          </div>\n          <form onSubmit={this.setGreeting}>\n            <input\n              type=\"text\"\n              className=\"Greeting-input\"\n              value={value}\n              onChange={this.handleChange}\n              disabled={setting}\n            />\n            {\n              !window.web3 ?\n              <a href=\"https://chrome.google.com/webstore/detail/nifty-wallet/jbdaocneiiinmjbjlgalhcelgbejmnid\" target=\"_blank\" rel=\"noopener noreferrer\">Get Nifty!</a> :\n              <input type=\"submit\" value=\"setGreeting()\" className=\"Greeting-submit\" disabled={!window.web3 || setting} />\n            }\n            {setting && <BarLoader color=\"#f26122\" width={300} />}\n          </form>\n          <div>\n            {error && `Error: ${error.message}`}\n            {receipt && <a href={`https://explorer.testnet.rsk.co/tx/${receipt.transactionHash}`} target=\"_blank\" rel=\"noopener noreferrer\">{receipt.transactionHash}</a>}\n          </div>\n        </main>\n        <footer className=\"App-footer\">\n          Find the smart contract <a href=\"https://explorer.testnet.rsk.co/address/0x0fb49bb37ba4b0186a87c866a2bbd29e1ef378da\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}